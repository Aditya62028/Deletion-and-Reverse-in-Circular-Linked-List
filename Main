import java.io.*;
import java.util.*;
class Node {
    int data;
    Node next;
    Node(int x) {
        data = x;
        next = null;
    }
}
class Solution {
    Node reverse(Node head) {
        if (head == null || head.next == head) return head; 
        Node prev = null;
        Node current = head;
        Node next;
        Node tail = head;
        do {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        } while (current != head);
        tail.next = prev;
        head.next = prev;
        return prev;
    }
    Node deleteNode(Node head, int key) {
        Node temp = head;
        if (temp.data == key) {
            while (temp.next != head) {
                temp = temp.next;
            }
            temp.next = temp.next.next;
            head = temp.next;
        } else {
            boolean found = false;
            while (temp.next.data != key) {
                temp = temp.next;
                if (temp == head) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                temp.next = temp.next.next;
            }
        }
        return head;
    }
}
public class LinkedList {
    static void printList(Node head) {
        if (head == null) {
            System.out.println("empty");
            return;
        }
        Node temp = head;
        do {
            System.out.print(temp.data + " ");
            temp = temp.next;
        } while (temp != head);
        System.out.println();
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine()); 
        while (t-- > 0) {
            List<Integer> arr = new ArrayList<>();
            String input = br.readLine();
            StringTokenizer st = new StringTokenizer(input);
            while (st.hasMoreTokens()) {
                arr.add(Integer.parseInt(st.nextToken()));
            }
            int key = Integer.parseInt(br.readLine()); 
            Node head = new Node(arr.get(0));
            Node tail = head;
            for (int i = 1; i < arr.size(); ++i) {
                tail.next = new Node(arr.get(i));
                tail = tail.next;
            }
            tail.next = head; 
            Solution ob = new Solution();
            Node current = ob.deleteNode(head, key);
            Node rev = ob.reverse(current); 
            printList(rev);
        }
    }
}
